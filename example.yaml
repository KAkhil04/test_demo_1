apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  creationTimestamp: '2025-03-27T19:38:39Z'
  generation: 4
  labels:
    k8s-app: blackbox-exporter
  managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:labels':
            .: {}
            'f:k8s-app': {}
        'f:spec':
          .: {}
          'f:endpoints': {}
          'f:selector': {}
      manager: Mozilla
      operation: Update
      time: '2025-03-27T20:51:27Z'
  name: blackbox-exporter
  namespace: j14v-dev-blackbox-exporter
  resourceVersion: '22751529'
  uid: 88b3d59c-e0c1-45c1-91d5-eba8e1103fd9
spec:
  endpoints:
    - interval: 30s
      params:
        module:
          - http_2xx_ssl
        target:
          - 'https://api.tdclabocpj14v.ebiz.xyz.com:6443'
      path: /probe
      port: http
      scheme: http
      targetPort: 9115
    - interval: 30s
      params:
        module:
          - http_2xx_ssl
        target:
          - 'https://j14v.apps.tdclabocpj14v.ebiz.xyz.com:443'
      path: /probe
      port: http
      scheme: http
      targetPort: 9115
  selector:
    matchLabels:
      app: blackbox-exporter



When will we review the dedicated cluster folder structure? We have been continuously onboarding namespaces into it, and it may become challenging to adjust them later.

#!/bin/bash

# Define GitLab project ID and access token
GITLAB_PROJECT_ID=12345
GITLAB_ACCESS_TOKEN="abcdef123456"

# Read cluster names from clusters.txt
while IFS= read -r clustername; do
  # Log in to the OpenShift cluster
  oc login https://api.${clustername}.xyz.com:6443 -u kurelak -p R@nch0@123

  # Check if login was successful
  if [ $? -eq 0 ]; then
    echo "Logged in to cluster: ${clustername}"

    # Get the secret and token
    SECRET=$(oc get secret -n appdev-gitops | grep argo-appdev-admin-token | head -n 1 | awk '{print $1}')
    TOKEN=$(oc get secret $SECRET -n appdev-gitops -o jsonpath='{.data.token}' | base64 --decode)

    # Save the token to a file
    echo $TOKEN > token.txt
    cat token.txt

    # Convert cluster name to uppercase
    CLUSTER_NAME_UPPER=$(echo $clustername | tr '[:lower:]' '[:upper:]')

    # Check if the variable already exists in GitLab
    EXISTING_VARIABLE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
      "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables/${CLUSTER_NAME_UPPER}_TOKEN")

    if [ -z "$EXISTING_VARIABLE" ]; then
      # Post the token to GitLab as a project variable
      curl --request POST \
        --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
        --header "Content-Type: application/json" \
        --data "{
          \"key\": \"${CLUSTER_NAME_UPPER}_TOKEN\",
          \"value\": \"${TOKEN}\",
          \"protected\": true,
          \"masked\": true,
          \"variable_type\": \"env_var\"
        }" \
        "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables"

      echo "Token for cluster ${clustername} posted to GitLab."
    else
      echo "Token for cluster ${clustername} already exists in GitLab."
    fi
  else
    echo "Failed to log in to cluster: ${clustername}"
  fi
done < clusters.txt


----------------------

#!/bin/bash

# Define GitLab project ID and access token
GITLAB_PROJECT_ID=12345
GITLAB_ACCESS_TOKEN="abcdef123456"

# Read cluster names from clusters.txt
while IFS= read -r clustername; do
  # Log in to the OpenShift cluster
  oc login https://api.${clustername}.xyz.com:6443 -u kurelak -p R@nch0@123

  # Check if login was successful
  if [ $? -eq 0 ]; then
    echo "Logged in to cluster: ${clustername}"

    # Get the secret and token
    SECRET=$(oc get secret -n appdev-gitops | grep argo-appdev-admin-token | head -n 1 | awk '{print $1}')
    TOKEN=$(oc get secret $SECRET -n appdev-gitops -o jsonpath='{.data.token}' | base64 --decode)

    # Save the token to a file
    echo $TOKEN > token.txt
    cat token.txt

    # Convert cluster name to uppercase
    CLUSTER_NAME_UPPER=$(echo $clustername | tr '[:lower:]' '[:upper:]')

    # Check if the variable already exists in GitLab
    HTTP_STATUS=$(curl --silent --output /dev/null --write-out "%{http_code}" \
      --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
      "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables/${CLUSTER_NAME_UPPER}_TOKEN")

    if [ "$HTTP_STATUS" -eq 404 ]; then
      # Post the token to GitLab as a project variable
      curl --request POST \
        --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
        --header "Content-Type: application/json" \
        --data "{
          \"key\": \"${CLUSTER_NAME_UPPER}_TOKEN\",
          \"value\": \"${TOKEN}\",
          \"protected\": true,
          \"masked\": true,
          \"variable_type\": \"env_var\"
        }" \
        "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables"

      echo "Token for cluster ${clustername} posted to GitLab."
    else
      echo "Token for cluster ${clustername} already exists in GitLab."
    fi
  else
    echo "Failed to log in to cluster: ${clustername}"
  fi
done < clusters.txt
---------------

#!/bin/bash

# Define GitLab project ID and access token
GITLAB_PROJECT_ID=12345
GITLAB_ACCESS_TOKEN="abcdef123456"

# Prompt the user to specify the environment
read -p "Enter the environment (prod or nonprod): " ENVIRONMENT

# Validate the environment input
if [[ "$ENVIRONMENT" != "prod" && "$ENVIRONMENT" != "nonprod" ]]; then
  echo "Invalid environment. Please enter 'prod' or 'nonprod'."
  exit 1
fi

# Read cluster names from clusters.txt
while IFS= read -r clustername; do
  # Determine the API URL based on the environment
  if [ "$ENVIRONMENT" == "prod" ]; then
    API_URL="https://api.${clustername}.xyz.com:6443"
  else
    API_URL="https://api.${clustername}.ebiz.xyz.com:6443"
  fi

  # Log in to the OpenShift cluster
  oc login $API_URL -u kurelak -p R@nch0@123

  # Check if login was successful
  if [ $? -eq 0 ]; then
    echo "Logged in to cluster: ${clustername}"

    # Get the secret and token
    SECRET=$(oc get secret -n appdev-gitops | grep argo-appdev-admin-token | head -n 1 | awk '{print $1}')
    TOKEN=$(oc get secret $SECRET -n appdev-gitops -o jsonpath='{.data.token}' | base64 --decode)

    # Save the token to a file
    echo $TOKEN > token.txt
    cat token.txt

    # Convert cluster name to uppercase
    CLUSTER_NAME_UPPER=$(echo $clustername | tr '[:lower:]' '[:upper:]')

    # Check if the variable already exists in GitLab
    HTTP_STATUS=$(curl --silent --output /dev/null --write-out "%{http_code}" \
      --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
      "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables/${CLUSTER_NAME_UPPER}_TOKEN")

    if [ "$HTTP_STATUS" -eq 404 ]; then
      # Post the token to GitLab as a project variable
      curl --request POST \
        --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" \
        --header "Content-Type: application/json" \
        --data "{
          \"key\": \"${CLUSTER_NAME_UPPER}_TOKEN\",
          \"value\": \"${TOKEN}\",
          \"protected\": true,
          \"masked\": true,
          \"variable_type\": \"env_var\"
        }" \
        "https://gitlab.example.com/api/v4/projects/${GITLAB_PROJECT_ID}/variables"

      echo "Token for cluster ${clustername} posted to GitLab."
    else
      echo "Token for cluster ${clustername} already exists in GitLab."
    fi
  else
    echo "Failed to log in to cluster: ${clustername}"
  fi
done < clusters.txt

--------------

Create Environment-Specific File: Create a file named prod.txt or nonprod.txt with the cluster names.
Format: Ensure the file has one cluster name per line.
Run the Script: Ensure the environment-specific file is in the same directory as the script and run the script.
-------------------

#!/bin/bash

# Set the filename to 'nonprod.txt' or 'prod.txt'
FILENAME="nonprod.txt"

# Check if the file exists
if [[ ! -f "$FILENAME" ]]; then
  echo "File $FILENAME does not exist."
  exit 1
fi

# Read the cluster names from the file
while IFS= read -r clustername; do
  # Remove any carriage return characters
  clustername=$(echo "$clustername" | tr -d '\r')

  # Create the YAML content
  yaml_content="apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${clustername}-app-of-apps-nonprod
  namespace: appdev-gitops
spec:
  project: appdev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  source:
    repoURL: https://gitlab.verizon.com/gts-openshift/onboarding_gitops_manifests_nonprod.git
    targetRevision: HEAD
    path: Dedicated/${clustername}/argoApps
  destination:
    server: https://kubernetes.default.svc
    namespace: appdev-gitops
"

  # Write the YAML content to a file
  echo "$yaml_content" > "${clustername}_AppOfApps.yaml"
done < "$FILENAME"
