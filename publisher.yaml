#!/bin/bash

# filepath: /path/to/script.sh

# Input and output file paths
INPUT_FILE="input.txt"
OUTPUT_FILE="output.csv"

# Clear the output file if it exists and write the CSV header
echo "Datacenter,Env,Cluster,Namespace,LOB,VAST,Support POC" > "$OUTPUT_FILE"

# Check if input file exists
if [[ ! -f "$INPUT_FILE" ]]; then
  echo "Input file $INPUT_FILE not found!"
  exit 1
fi

# OpenShift login credentials
USERNAME="kurelak"
PASSWORD="R@nch0@123"

# List of explicitly ignored namespaces
IGNORED_NAMESPACES=(
  "appdev-gitops"
  "bitnami-sealed-secrets"
  "cert-manager"
  "cert-manager-operator"
  "community-operators"
  "costmanagement-metrics-operator"
  "default"
  "global-load-balancer-operator"
  "grafana"
  "group-sync-operator"
  "istio-system"
  "kube-descheduler-operator"
  "kube-node-lease"
  "kube-public"
  "kube-system"
  "lb-operator"
  "node-observability-operator"
  "open-cluster-management-addon-observability"
  "open-cluster-management-agent"
  "open-cluster-management-agent-addon"
  "openshift"
  "proactive-node-scaling-operator"
  "sacnpocpj14v"
  "sysdig"
  "trident"
)

# Function to determine the datacenter based on the cluster name
get_datacenter() {
  local cluster_name=$1
  if [[ "$cluster_name" == tpa* ]]; then
    echo "Tampa"
  elif [[ "$cluster_name" == tdc* ]]; then
    echo "Twinsburg"
  elif [[ "$cluster_name" == sac* ]]; then
    echo "Sacramento"
  else
    echo "Unknown"
  fi
}

# Loop through each cluster name in the input file
while IFS= read -r CLUSTER_NAME; do
  if [[ -z "$CLUSTER_NAME" ]]; then
    continue
  fi

  echo "Processing cluster: $CLUSTER_NAME"

  # Log into the cluster
  oc login "https://api.${CLUSTER_NAME}.ebiz.verizon.com" -u "$USERNAME" -p "$PASSWORD" --insecure-skip-tls-verify 2>/dev/null
  if [[ $? -ne 0 ]]; then
    echo "Failed to log into cluster: $CLUSTER_NAME"
    continue
  fi

  # Get all namespaces
  NAMESPACES=$(oc get namespaces -o jsonpath='{.items[*].metadata.name}')
  if [[ $? -ne 0 ]]; then
    echo "Failed to fetch namespaces for cluster: $CLUSTER_NAME"
    continue
  fi

  # Determine the datacenter
  DATACENTER=$(get_datacenter "$CLUSTER_NAME")

  # Loop through each namespace and check specific labels and annotation
  for NAMESPACE in $NAMESPACES; do
    # Skip explicitly ignored namespaces
    if [[ " ${IGNORED_NAMESPACES[@]} " =~ " $NAMESPACE " ]]; then
      continue
    fi

    # Skip namespaces containing "openshift" or "operator"
    if [[ "$NAMESPACE" == *openshift* || "$NAMESPACE" == *operator* ]]; then
      continue
    fi

    # Skip the namespace that matches the cluster name
    if [[ "$NAMESPACE" == "$CLUSTER_NAME" ]]; then
      continue
    fi

    # Get specific labels
    LOB_LABEL=$(oc get namespace "$NAMESPACE" -o jsonpath='{.metadata.labels.onboarding\.xyz\.io/lob}' 2>/dev/null)
    VAST_LABEL=$(oc get namespace "$NAMESPACE" -o jsonpath='{.metadata.labels.onboarding\.xyz\.io/vast}' 2>/dev/null)

    # Get specific annotation
    SUPPORT_POC_ANNOTATION=$(oc get namespace "$NAMESPACE" -o jsonpath='{.metadata.annotations.xyz\.com/support-poc}' 2>/dev/null)

    # Default to "Not Found" if labels or annotation are missing
    LOB_LABEL=${LOB_LABEL:-Not Found}
    VAST_LABEL=${VAST_LABEL:-Not Found}
    SUPPORT_POC_ANNOTATION=${SUPPORT_POC_ANNOTATION:-Not Found}

    # Write the data to the CSV file
    echo "$DATACENTER,nonprod,$CLUSTER_NAME,$NAMESPACE,$LOB_LABEL,$VAST_LABEL,$SUPPORT_POC_ANNOTATION" >> "$OUTPUT_FILE"
  done

done < "$INPUT_FILE"

echo "Processing complete. Output written to $OUTPUT_FILE."
